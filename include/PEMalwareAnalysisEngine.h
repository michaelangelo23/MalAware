#pragma once

#include "peCommon.h"
#include <vector>
#include <string>
#include <map>

class PEMalwareAnalysisEngine {
public:
    struct MalwareIndicator {
        std::string category;
        std::string description;
        int severity;
        std::string evidence;
        bool isDetected;
    };

    struct MalwareAnalysisResult {
        bool isSuspicious;
        int riskScore;
        std::vector<MalwareIndicator> indicators;
        std::string classification;
        std::string recommendation;
        std::map<std::string, std::string> metadata;
    };

    PEMalwareAnalysisEngine() = default;
    ~PEMalwareAnalysisEngine() = default;

    static MalwareAnalysisResult analyzeFile(PPE_FILE_INFO pFileInfo);
    static std::vector<MalwareIndicator> detectPackers(PPE_FILE_INFO pFileInfo);
    static std::vector<MalwareIndicator> detectAntiAnalysis(PPE_FILE_INFO pFileInfo);
    static std::vector<MalwareIndicator> detectSuspiciousImports(PPE_FILE_INFO pFileInfo);
    static std::vector<MalwareIndicator> detectSuspiciousSections(PPE_FILE_INFO pFileInfo);
    static std::vector<MalwareIndicator> detectObfuscation(PPE_FILE_INFO pFileInfo);
    
    static std::string classifyMalware(const MalwareAnalysisResult& result);
    static int calculateRiskScore(const std::vector<MalwareIndicator>& indicators);
    static std::string generateRecommendation(int riskScore, const std::string& classification);
    static bool hasHighSeverityIndicators(const std::vector<MalwareIndicator>& indicators);
    
    static void logMalwareAnalysis(const MalwareAnalysisResult& analysisResult);
    static std::string generateDetailedReport(const MalwareAnalysisResult& result);
    static std::string generateSummaryReport(const MalwareAnalysisResult& result);

private:
    static bool isKnownPacker(const std::string& sectionName);
    static bool isSuspiciousEntryPoint(PPE_FILE_INFO pFileInfo);
    static bool hasAntiDebugImports(PPE_FILE_INFO pFileInfo);
    static bool hasAntiVMImports(PPE_FILE_INFO pFileInfo);
    static bool hasSuspiciousStrings(PPE_FILE_INFO pFileInfo);
    static bool hasCodeInDataSections(PPE_FILE_INFO pFileInfo);
    static bool hasHollowingIndicators(PPE_FILE_INFO pFileInfo);
    static bool hasInjectionIndicators(PPE_FILE_INFO pFileInfo);
    
    static const std::vector<std::string> KNOWN_PACKERS;
    static const std::vector<std::string> ANTI_DEBUG_IMPORTS;
    static const std::vector<std::string> ANTI_VM_IMPORTS;
    static const std::vector<std::string> INJECTION_IMPORTS;
    static const std::vector<std::string> CRYPTO_IMPORTS;
    static const std::vector<std::string> NETWORK_IMPORTS;
    static const std::vector<std::string> REGISTRY_IMPORTS;
    static const std::vector<std::string> FILE_IMPORTS;
    
    static constexpr int PACKER_WEIGHT = 15;
    static constexpr int ANTI_ANALYSIS_WEIGHT = 25;
    static constexpr int OBFUSCATION_WEIGHT = 20;
    static constexpr int SUSPICIOUS_IMPORTS_WEIGHT = 10;
    static constexpr int SUSPICIOUS_SECTIONS_WEIGHT = 15;
    static constexpr int HOLLOWING_WEIGHT = 30;
    static constexpr int INJECTION_WEIGHT = 25;
};

int AnalyzeMalware(PPE_FILE_INFO pFileInfo);
